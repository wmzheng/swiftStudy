//: Playground - noun: a place where people can play

import UIKit

//Êï∞ÊçÆÁ±ªÂûã

/*
func test1(){
    var str = "Hello, playground"
    
    let a = 100
    let b = 200
    a+b
    
    var value = 2
    while value < 10000 {
        value = value * 2
    }
    str += "???"
    
    print(str)
    
    //Âº∫Á±ªÂûãËØ≠Ë®Ä
    
    
    let website : String = "hello"
    
    //‰∏ÄËà¨Áî®IntÂÆö‰πâÂ∞±ÂèØ‰ª•‰∫ÜÔºå‰∏çÈúÄË¶ÅÁî®Int8Á≠âÁ≤æÁ°Æ‰ΩçÊï∞
    var imInt : Int = 80
    Int.max
    Int.min
    
    var imUInt : UInt = 80
    UInt.max
    UInt.min
    
    //_‰∏ãÂàíÁ∫øÂàÜÂâ≤Êï∞Â≠ó
    let  bignum = 100_0000
    
    
    let imFloat : Float = 3.1415926
    let imDouble : Double = 3.1415926
    let eFloat : Float = 3.14e10
    let eFloat1 : Float = 3.14e-10
    
    //Âº∫Âà∂Á±ªÂûãËΩ¨Êç¢
    imInt + Int(imFloat)
    
    let red : CGFloat = 0.1
    UIColor(red: red, green: 0.3, blue: 0.4, alpha: 1.0)
    
    
    //Bool
    let imTure : Bool = true
    let imFalse : Bool = false
    
    //ÈùûÈõ∂ÂÄº‰∏çËÉΩÂÅö‰∏∫ÁúüÂÄº
    if imTure {
        print("I‚Äòm fine")
    }else{
        print("I‚Äòm flase")
    }
    
    //ÂÖÉÁ•ñ
    let point = (5,2)
    var httpResponse = (404 , "not found")
    var point2 : (Int,Int,Int) = (10,5,2)
    
    var (x,y) = point
    x
    y
    
    point.0
    point.1
    
    let point3 = (x:3,y:4)
    point3.x
    point3.y
    
    let point4 : (x:Int,y:Int) = (5,6)
    point4.x
    point4.y

//Êï∞ÊçÆÁ±ªÂûã È¶ñÂ≠óÊØçÁî®Â§ßÂÜô  ÂèòÈáèÂêçÁî®Â∞èÂÜô ÂèòÈáèÂêçÂèØ‰ª•‰∏≠Êñá„ÄÅË°®ÊÉÖÁ¨¶Âè∑Ôºàunicode ‰ªªÊÑèÂ≠óÁ¨¶Ôºâ
    var ÂêçÂ≠ó = "zhengweimin"
    print("ÊàëÁöÑÂêçÂ≠óÊòØ" + ÂêçÂ≠ó)
    
    var üòÄ = "zn"
    print(üòÄ)
    
    let x1=1,y1=2,z1=3,b1=true
    print(x1,y1,z1,b1)
    //separator ÈªòËÆ§Á©∫Ê†º terminatorÈªòËÆ§ÂõûËΩ¶
    print(x1,y1,z1, separator: "####")
    print(x1,y1,z1, separator: "####", terminator: "-----hello");
    print("hello")
    
    print("\(x1) * \(y1) = \(x1*y1)")

    
/*Â§öË°åÂèØ‰ª•ÂµåÂ•óÊ≥®Èáä
     ssddd
     /*
        ssddd
     */
*/
}
test1()
*/


//ËøêÁÆóÁ¨¶

/*
 func test2(){
 var a = 1
 if a == 1 {
 print("a == 1")
 }
 
 a += 1
 a -= 1
 
 var x = 10,y=3
 
 x/y
 Double(x) / Double(y)
 
 
 //ÊØîËæÉ == != > <  >= <=    === !===    ÈÄªËæë ! && ||
 let money = 100
 let price = 70
 if money >= price  {
 print("buy it")
 }
 //‰∏âÁõÆ
 var battery = 21
 let batteryColor : UIColor
 batteryColor =  (battery <= 20 ? UIColor.red : UIColor.green)//letÁ¨¨‰∏ÄÊ¨°ËµãÂÄº
 //batteryColor = UIColor.yellow
 
 
 //Âå∫Èó¥ [a,b] a...b  [a,b) a..<b
 for i in 0...10 {
 print(i)
 }
 var cources = ["Êï∞Â≠¶","ËØ≠Êñá","Ëã±ËØ≠"]
 for i in 0..<cources.count{
 print(cources[i])
 }
 }
 test2()
 */

//ÈÄªËæëÊéßÂà∂

/*
func test3(){
    //È°∫Â∫èÁªìÊûÑ Âæ™ÁéØÁªìÊûÑ ÈÄâÊã©ÁªìÊûÑ
    for i in stride(from: 3, through: 0, by: -1) {
        print(i)
    }
    
    for i in stride(from: 3, to: 0, by: -1) {  //‰∏çÂåÖÊã¨0  Ê≠•Èïø‰∏∫-1
        print(i)
    }
    
    //ÈÄÜÂ∫è
    for i in (0...4).reversed() {
        print(i)
    }

//while break continue
    
    var a = 1
    repeat{
        a += 1
        print("====\(a)")
    }while a<3
    
    a = 0
    while true {
        
        a += 1
        if a == 3 {
            continue
        }
        print("====\(a)")
        if a == 7 {
            break;
        }
    }
    
//switch ÊâÄÊúâÁöÑÂü∫Á°ÄÊï∞ÊçÆÈÉΩÂèØ‰ª•Âà§Êñ≠  Âå∫Èó¥‰πüÂèØ‰ª•Âà§Êñ≠  ÊâÄÊúâÂèØËÉΩÊÄßÈÉΩÂøÖÈ°ªÁ©∑‰∏æÂá∫Êù•
    var rating = "A"
    switch rating {
    case "a","A":
        print("Great")
    case "B":
        print("just so-so")
    default:
        print("error")   //‰∏çÊâßË°å‰ªª‰Ωï‰∏úË•ø ÂèØ‰ª•Áî® break ÊàñËÄÖ ÔºàÔºâ
    }
    
    let point1 = (5,0)
    switch point1 {
    case (let x,0):
        print("(\(x),0)")
    case (_,0):
        print("(-,0)")
    default:
        print("error")
    }
    
    let point2 = (0,0)
    switch point2 {
    case (0,0):
        print("(0,0)")
        fallthrough    //ÂèØ‰ª•Ë∑≥ÂÖ•‰∏ã‰∏Ä‰∏™caseËØ≠Âè•
    case (_,0):
        print("(-,0)")
    default:
        print("error")
    }
    
    
    findAnswer:
    for m in 1...300 {
        for n in 1...300 {
            if m*m*m*m - n*n == 15*m*n {
                print(m,n)
                break findAnswer  //Ë∑≥Âá∫Êï¥‰∏™Âæ™ÁéØ
            }
        }
    }
    
//where
    let point3 = (3,3)
    switch point3 {
    case (let x,let y) where x == y:
        print("x==y")
    case let (x,y) where x == -y:
        print("x==-y")
    default:
        print("error")
    }

//if case
    let age2 = 19
    if case 10...19 = age2 {
        print("age in [10,19]")
    }
    
    if case 10...19=age2 , age2>17 {
        print("age in [10,19] and >18")
    }
    
    let vector = (4,0)
    if case (let x,0) = vector ,x>2 && x<5{
        print("x>2 && x<5")
    }
    
//for case
    for case let i in 1...100 where i%3==0 {
        print(i)
    }
    
//guard
    let money=5
    let price=6
    guard money >= price else {  //‰∏çÊª°Ë∂≥ money2 >= price2 ÊâßË°åelse
        print("money<price")
        return
    }
}
test3()
*/

//Â≠óÁ¨¶‰∏≤

/*
func test4(){
    var str = "hello swift"
    let str2 = String("hello swift")
    let emptyStr = ""
    let emptyStr2 = String("")
    
    str2?.isEmpty
    emptyStr.isEmpty
    
    str + "!!!!"
    
    let s = "\\"
    print(s)
    let s1 = "\"hello\""
    print(s1)
    let s2 = "\"hello\"\t\"hi\""
    print(s2)
    
    for c in str.characters {
        print(c)
    }
    
    let mark : Character = "!" //Â≠óÁ¨¶‰πüÊòØÁî®ÂèåÂºïÂè∑ ÈúÄÊòæÁ§∫Â£∞ÊòéÁ±ªÂûã ‰∏çÁÑ∂ÈªòËÆ§ÊòØString
    str + String(mark)
    str
    str.append(mark)
    str
    
    //ÈÉΩÊòØ‰∏Ä‰∏™Â≠óÁ¨¶
    let c : Character = "Âπï"
    let c1 : Character = "üê∂"
    let c2 : Character = "\u{1F60E}"
    
    var str3 = "ËãπÊûúÊâãÊú∫"
    var str4 = "üê∂üê∂üê∂"
    var str5 = "\u{1F60E}\u{1F60E}\u{1F60E}"
    
    
    str3.characters.count    //ÈïøÂ∫¶ÈÉΩ‰∏∫‰∏â
    str4.characters.count
    str5.characters.count
    
    var str6 = "cafeÃÅ"
    var str7 = "cafe\u{0301}"
    str6.characters.count
    str7.characters.count
    
    let startIndex = str3.startIndex
    startIndex
    
    let otherIndex = str3.index(startIndex, offsetBy: 2)
    
    str3[otherIndex]
    let endIndex = str3.endIndex   //[startIndex endIndex)
    
    
    let range = startIndex..<otherIndex
    str3[range]
    
    str3.replaceSubrange(range, with: "Èî§Â≠ê")
    str3
    str3.append("!!!!")
    str3.insert("?", at: str3.endIndex)
    str3.remove(at: str3.index(before: str3.endIndex))
    str3
    
    var str8 = "hello, swift"
    str8.uppercased()
    str8.lowercased()
    str8.capitalized
    str8.contains("hello")
    str8.hasPrefix("he")
    str8.hasSuffix("st")
    
    //as NSString ËΩ¨ String
    let str9 : String = NSString(format: "one third is %.2f", 1.0/3.0) as String
}
test4()
*/

//ÂèØÈÄâÁ±ªÂûã

/*
func test5(){
//ÂèØÈÄâÂûã  ËÉΩËµãÂÄºnil Á©∫   Â£∞Êòé‰∏∫ÂèòÈáè
    var errorCode : String? = "404"

//Ëß£ÂåÖ
    print(errorCode!) //errorCode ÊòØÂèØÈÄâÂûã ÊúâÂèØËÉΩÊòØÁ©∫  ÊâÄ‰ª•ÈúÄË¶ÅËß£ÂåÖ ‰∏çÂÆâÂÖ®
    if errorCode != nil {
        "The errorCode is " + errorCode!
    }else{
        "No error"
    }
    
    if let unwrappedError = errorCode {   //‰∏çÈúÄË¶ÅËß£ÂåÖ
        "The errorCode is " + unwrappedError
    }
    
    if let errorCode = errorCode {   //ÂèØ‰ª•Áî®ÂêåÂêç
        "The errorCode is " + errorCode
    }else{
        "No error"
    }
    
    var errorMessage:String? = "Not found"
    if  let errorCode = errorCode,
        let errorMessage = errorMessage{
        print("The errorCode is " + errorCode + "\nThe errorMessage is " + errorMessage)
    }
    
    if  let errorCode = errorCode,
        let errorMessage = errorMessage,
        errorCode == "404"{
        print("Page not found")
    }
    
    
    if let errorMessage = errorMessage{
        errorMessage.uppercased()
    }
    errorMessage?.uppercased()//Á≠âÂêå‰∫é‰∏äÈù¢ÂÜôÊ≥ï  errorMessageÂ∞ùËØïÂéªËß£ÂåÖ
    
    let message = errorMessage == nil ? "No error" : errorMessage
    let message1 = errorMessage ?? "No error" //Á≠âÂêå‰∫é‰∏äÈù¢ÂÜôÊ≥ï
    
    var error1 : (errorCode:Int,errorMessage:String?) = (404,"Not Found")
    //error1 = nil  error1‰∏çÊòØÂèØÈÄâÁ±ªÂûã
    
    var error2:(errorCode:Int,errorMessage:String)? = (404,"Not Found")
    error2 = nil  //error2ÊòØÂèØÈÄâÁ±ªÂûã
    
    var error3:(errorCode:Int,errorMessage:String?)? = (404,"Not Found")

    let age = "xyz"
    let age1 = Int(age)  //Int(age) ËøîÂõûÂÄºÊòØÂèØÈÄâÂûã
    
//ÈöêÂºèÂèØÈÄâÂûã ‰∏çÈúÄË¶ÅËß£ÂåÖ  ‰∏ÄÂºÄÂßãÂèØ‰ª•‰∏∫nil ÂêéÈù¢‰ΩøÁî®‰∏ÄÂÆöË¶ÅÊúâÂÄº
    var errorMessage1 : String!
    errorMessage1 = "not fount"
    "The errorMessage is " + errorMessage1
}
test5()
*/

//Êï∞ÁªÑ ÊúâÂ∫è

/*
func test6(){
    //Êï∞ÁªÑÈáåÈù¢ÁöÑÊï∞ÊçÆÁ±ªÂûãÂøÖÈ°ª‰∏ÄËá¥
    var numbers = [0,1,2,3,4,5]
    var vowels : [Character] = ["A","E","I"]
    var numbers1 : Array<Int> = [0,1,2,3,4,5]
    
    var emptyArray1 : [Int] = []
    var emptyArray3 = [Int]()
    var emptyArray4 = Array<Int>()
    
    var  allZeros = [Int](repeatElement(0, count: 5))
    

    numbers.count
    numbers.isEmpty
    numbers[2]
    numbers.first
    numbers.last
    emptyArray1.first
    
    if let firstVowel = vowels.first {
        print("the first vowel is " + String(firstVowel))
    }
    
    vowels.first
    
    numbers.min()
    vowels.max()
    
    numbers[2...4]
    
    vowels.contains("A")
    vowels.contains("B")
    
    vowels.index(of: "A")
    vowels.index(of: "B")
    
    for index in 0..<numbers.count {
        numbers[index]
    }
    
    for number in numbers {
        print(number)
    }
    
    for (i,number) in numbers.enumerated() {
        print("\(i+1):\(number)")
    }
    
    let numbers2 = [0,1,2,3,4,5]
    numbers == numbers2
    
    
    numbers.append(6)
    numbers += [7,8]
    numbers.insert(-1, at: 0)
    
    numbers.removeLast()
    numbers.removeFirst()
    numbers.remove(at: 3)
    numbers
  //  numbers.removeSubrange(0..<3)
 //   numbers.removeAll()
    
    
    numbers[3] = 3
    numbers
    numbers[4..<numbers.count] = [4,5,6]
    numbers
    numbers[4..<numbers.count] = [4]
    numbers
    
//‰∫åÁª¥Êï∞ÁªÑ
    var board = [[1024,16,2,0],[256,4,2,0],[64,2,0,0],[2,0,0,0]]
    var board1 : Array <Array<Int>> /*[Array<Int>] „ÄÅ[[Int]] „ÄÅArray<Array<Int>>*/ = [[1024,16,2,0],[256,4,2,0],[64,2,0,0],[2,0,0,0]]
    board[0]
    board[0][0]
    board[0].append(0)
    board
    board.append([0,0,0,0])
    board += [[1,1,1,1]]
    
    var ary = [1,2,3,4] as NSArray
}
test6()
*/

//Â≠óÂÖ∏

/*
func test7(){
    var dict = ["swift":"Èõ®ÁáïÔºõÂø´ÈÄü","python":"Â§ßËüí"]
    var dict1 : Dictionary<String,String> = ["swift":"Èõ®ÁáïÔºõÂø´ÈÄü","python":"Â§ßËüí"]
    
    var emptyDic1 : [String:Int] = [:]
    var emptyDic2 : Dictionary<Int,String> = [:]
    var emptyDic3 = [String:String]()
    var emptyDic4 = Dictionary<Int,Int>()
    
    dict["swift"]
    dict["c++"]   //ÂèØÈÄâ
    
    if let value = dict["swift"]{
        print(value)
    }
    
    dict.count
    dict.isEmpty
    emptyDic1.isEmpty
    
    Array(dict.keys)
    Array(dict.values)
    
    //Â≠óÂÖ∏ÊòØÊó†Â∫èÁöÑ
    for key in dict.keys {
        print(key)
    }
    
    for value in dict.values {
        print(value)
    }
    
    for (key,value) in dict.enumerated() {
        print("\(key):\(value)")
    }
    
    var dict2 = [1:"a",2:"b",3:"c"]
    let dict3 = [1:"a",2:"b",3:"c"]
    let dict4 = [1:"a",3:"c",2:"b"]
    dict2 == dict3  //ÂíåÊï∞ÁªÑ‰∏ÄÊ†∑ ÊòØÂÄºÊØîËæÉ
    dict2 == dict4  //Êó†Â∫èÁöÑ
    
    dict2[1] = "d"
    dict2
    dict2.updateValue("a", forKey: 1)  //ËøîÂõûÊóßÂÄº
    dict2
    dict2.updateValue("d", forKey: 4)  //‰∏çÂ≠òÂú®key Êñ∞Â¢û ÊóßÂÄº‰∏∫Á©∫
    dict2
    
    dict2[4] = nil
    dict2
    
    dict2.removeValue(forKey: 3) //ËøîÂõûÂà†Èô§ÁöÑÂÄº
    dict2
}
test7()
*/

//ÈõÜÂêà  Êó†Â∫è ÂîØ‰∏Ä Âø´ÈÄüÊü•Êâæ

/*
func test8(){
    //Áõ∏ÊØîÊï∞ÁªÑÊòØÊó†Â∫è„ÄÅÂÖÉÁ¥†ÊòØ‰∏çÈáçÂ§çÁöÑ‰ºöËá™Âä®ÂéªÊéâ
    var skillsOfA : Set<String> = ["swift","OC"]
    
    var emptySet1 : Set<Int> = []
    var emptySet2 = Set<Int>()
    
    var vowels = Set(["a","b","c"])
    
    skillsOfA.count
    
    let set: Set<Int> = [2,2,2,2]  //ÂéªÈô§ÈáçÂ§ç
    set.count
    
    skillsOfA.isEmpty
    emptySet1.isEmpty
    
    let e = vowels.first  //Êó†Â∫è ÈöèÊú∫ÂèñÂá∫‰∏Ä‰∏™
    vowels.contains("a")
    
    for vowel in vowels {
        print(vowel)
    }
    
    let setA : Set = [1,2,3]
    let setB : Set = [1,2,3]
    setA == setB
    
    skillsOfA.insert("CSS")
    skillsOfA.insert("swift")
    
    skillsOfA.remove("CSS")
    skillsOfA
    skillsOfA.remove("java")
    
    skillsOfA.removeAll()
    
//Âπ∂ÈõÜ
    var set1 = Set(["swift","OC"])
    var set2 = Set(["HTML","CSS"])
    var set3 = Set(["swift","HTML"])
    var set4 = Set(["swift"])
    set1.union(set3)   //‰∏çÊîπÂèòset1
    set1
 //   set1.formUnion(set3) //ÊîπÂèòset1
 //   set1

//‰∫§ÈõÜ
    set1.intersection(set3)
    set1
 //   set1.formIntersection(set3)
 //   set1
  
//ÂáèÊ≥ï  set1 ÂáèÂéª set1Âíåset3ÁöÑ‰∫§ÈõÜ
    set1.subtracting(set3)
    set1
    
    //set1.subtract(set3)
    
//‰∫¶Êàñ
    set1.symmetricDifference(set3)
    set1
    
//    set1.formSymmetricDifference(set3)
//    set1
    
    set2.isSubset(of: set1)        //Â≠êÈõÜ
    set4.isStrictSubset(of: set1)  //set4ÊòØset1ÁöÑÁúüÂ≠êÈõÜ

    
    set1.isSuperset(of: set4)  //set1ÊòØset4ÁöÑË∂ÖÈõÜ
    set1.isStrictSuperset(of: set4) //set1ÊòØset4ÁöÑÁúüË∂ÖÈõÜ
    
    set1.isDisjoint(with: set2)  //ÊòØÂê¶Áõ∏Á¶ª Ê≤°ÊúâÂÖ¨ÂÖ±ÂÖÉÁ¥†
}
test8()
*/
